var SyslogPosix, exports, posix, util, winston;

posix = require('posix');

util = require('util');

winston = require('winston');

SyslogPosix = winston.transports.SyslogPosix = function(options) {
  if (options == null) {
    options = {};
  }
  this.name = 'SyslogPosix';
  this.level = options.level || 'debug';
  this.identity = options.identity || process.title;
  this.facility = options.facility || 'local0';
  this.unmapped = options.unmapped || 'info';
  return this.showPid = options.showPid === void 0 ? true : options.showPid;
};

util.inherits(SyslogPosix, winston.Transport);

SyslogPosix.prototype.log = function(level, msg, meta, callback) {
  var maxLength, message, messages, prepend, syslogOptions, syslogSeverity;
  if (this.silent) {
    return callback(null, true);
  }
  syslogSeverity = level;
  if (level === 'trace' || level === 'debug') {
    syslogSeverity = 'debug';
  } else if (level === 'warn' || level === 'warning') {
    syslogSeverity = 'warning';
  } else if (level === 'error') {
    syslogSeverity = 'err';
  } else if (level === 'fatal' || level === 'emerg') {
    syslogSeverity = 'emerg';
  } else {
    syslogSeverity = this.unmapped;
  }
  message = msg;
  prepend = '[' + level + '] ';
  if (typeof meta === 'string') {
    message += ' ' + meta;
  } else if (meta && typeof meta === 'object' && Object.keys(meta).length > 0) {
    message += ' ' + util.inspect(meta, false, null, false);
  }
  message = message.replace(/\u001b\[(\d+(;\d+)*)?m/g, '');
  messages = [];
  maxLength = 1024 - prepend.length;
  while (message.length > maxLength) {
    messages.push(prepend + message.substring(0, maxLength));
    message = message.substring(maxLength);
  }
  messages.push(prepend + message);
  syslogOptions = {
    cons: true,
    pid: this.showPid
  };
  posix.openlog(this.identity, syslogOptions, this.facility);
  messages.forEach(function(message) {
    return posix.syslog(syslogSeverity, message);
  });
  posix.closelog();
  this.emit('logged');
  return callback(null, true);
};

module.exports = exports = SyslogPosix;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLDBDQUFBOztBQUFBLEtBQUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQUFSLENBQUE7O0FBQUEsSUFDQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRFAsQ0FBQTs7QUFBQSxPQUVBLEdBQVUsT0FBQSxDQUFRLFNBQVIsQ0FGVixDQUFBOztBQUFBLFdBSUEsR0FBYyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQW5CLEdBQWlDLFNBQUMsT0FBRCxHQUFBOztJQUFDLFVBQVU7R0FDeEQ7QUFBQSxFQUFBLElBQUMsQ0FBQSxJQUFELEdBQVEsYUFBUixDQUFBO0FBQUEsRUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLE9BQU8sQ0FBQyxLQUFSLElBQWlCLE9BRDFCLENBQUE7QUFBQSxFQUVBLElBQUMsQ0FBQSxRQUFELEdBQVksT0FBTyxDQUFDLFFBQVIsSUFBb0IsT0FBTyxDQUFDLEtBRnhDLENBQUE7QUFBQSxFQUdBLElBQUMsQ0FBQSxRQUFELEdBQVksT0FBTyxDQUFDLFFBQVIsSUFBb0IsUUFIaEMsQ0FBQTtBQUFBLEVBSUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxPQUFPLENBQUMsUUFBUixJQUFvQixNQUpoQyxDQUFBO1NBS0EsSUFBQyxDQUFBLE9BQUQsR0FBYyxPQUFPLENBQUMsT0FBUixLQUFtQixNQUF0QixHQUFxQyxJQUFyQyxHQUErQyxPQUFPLENBQUMsUUFOckI7QUFBQSxDQUovQyxDQUFBOztBQUFBLElBZ0JJLENBQUMsUUFBTCxDQUFjLFdBQWQsRUFBMkIsT0FBTyxDQUFDLFNBQW5DLENBaEJBLENBQUE7O0FBQUEsV0FrQlcsQ0FBQSxTQUFFLENBQUEsR0FBYixHQUFtQixTQUFDLEtBQUQsRUFBUSxHQUFSLEVBQWEsSUFBYixFQUFtQixRQUFuQixHQUFBO0FBQ2pCLE1BQUEsb0VBQUE7QUFBQSxFQUFBLElBQUcsSUFBQyxDQUFBLE1BQUo7QUFDRSxXQUFPLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZixDQUFQLENBREY7R0FBQTtBQUFBLEVBSUEsY0FBQSxHQUFpQixLQUpqQixDQUFBO0FBS0EsRUFBQSxJQUFHLEtBQUEsS0FBUyxPQUFaO0FBQ0UsSUFBQSxjQUFBLEdBQWlCLE9BQWpCLENBREY7R0FBQSxNQUVLLElBQUcsS0FBQSxLQUFTLE1BQVo7QUFDSCxJQUFBLGNBQUEsR0FBaUIsU0FBakIsQ0FERztHQUFBLE1BRUEsSUFBRyxLQUFBLEtBQVMsT0FBWjtBQUNILElBQUEsY0FBQSxHQUFpQixLQUFqQixDQURHO0dBQUEsTUFFQSxJQUFHLEtBQUEsS0FBUyxPQUFaO0FBQ0gsSUFBQSxjQUFBLEdBQWlCLE9BQWpCLENBREc7R0FBQSxNQUFBO0FBR0gsSUFBQSxjQUFBLEdBQWlCLElBQUMsQ0FBQSxRQUFsQixDQUhHO0dBWEw7QUFBQSxFQWdCQSxPQUFBLEdBQVUsR0FoQlYsQ0FBQTtBQUFBLEVBaUJBLE9BQUEsR0FBVSxHQUFBLEdBQU0sS0FBTixHQUFjLElBakJ4QixDQUFBO0FBa0JBLEVBQUEsSUFBRyxNQUFBLENBQUEsSUFBQSxLQUFlLFFBQWxCO0FBQ0UsSUFBQSxPQUFBLElBQVcsR0FBQSxHQUFNLElBQWpCLENBREY7R0FBQSxNQUVLLElBQUcsSUFBQSxJQUFTLE1BQUEsQ0FBQSxJQUFBLEtBQWUsUUFBeEIsSUFBcUMsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFaLENBQWlCLENBQUMsTUFBbEIsR0FBMkIsQ0FBbkU7QUFDSCxJQUFBLE9BQUEsSUFBVyxHQUFBLEdBQU0sSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEtBQW5CLEVBQTBCLElBQTFCLEVBQWdDLEtBQWhDLENBQWpCLENBREc7R0FwQkw7QUFBQSxFQXNCQSxPQUFBLEdBQVUsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IseUJBQWhCLEVBQTJDLEVBQTNDLENBdEJWLENBQUE7QUFBQSxFQXlCQSxRQUFBLEdBQVcsRUF6QlgsQ0FBQTtBQUFBLEVBMEJBLFNBQUEsR0FBWSxJQUFBLEdBQU8sT0FBTyxDQUFDLE1BMUIzQixDQUFBO0FBMkJBLFNBQU0sT0FBTyxDQUFDLE1BQVIsR0FBaUIsU0FBdkIsR0FBQTtBQUNFLElBQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxPQUFBLEdBQVUsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUIsU0FBckIsQ0FBeEIsQ0FBQSxDQUFBO0FBQUEsSUFDQSxPQUFBLEdBQVUsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsU0FBbEIsQ0FEVixDQURGO0VBQUEsQ0EzQkE7QUFBQSxFQThCQSxRQUFRLENBQUMsSUFBVCxDQUFjLE9BQUEsR0FBVSxPQUF4QixDQTlCQSxDQUFBO0FBQUEsRUErQkEsYUFBQSxHQUNFO0FBQUEsSUFBQSxJQUFBLEVBQU0sSUFBTjtBQUFBLElBQ0EsR0FBQSxFQUFLLElBQUMsQ0FBQSxPQUROO0dBaENGLENBQUE7QUFBQSxFQWtDQSxLQUFLLENBQUMsT0FBTixDQUFjLElBQUMsQ0FBQSxRQUFmLEVBQXlCLGFBQXpCLEVBQXdDLElBQUMsQ0FBQSxRQUF6QyxDQWxDQSxDQUFBO0FBQUEsRUFtQ0EsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsU0FBQyxPQUFELEdBQUE7V0FDZixLQUFLLENBQUMsTUFBTixDQUFhLGNBQWIsRUFBNkIsT0FBN0IsRUFEZTtFQUFBLENBQWpCLENBbkNBLENBQUE7QUFBQSxFQXFDQSxLQUFLLENBQUMsUUFBTixDQUFBLENBckNBLENBQUE7QUFBQSxFQXNDQSxJQUFDLENBQUEsSUFBRCxDQUFNLFFBQU4sQ0F0Q0EsQ0FBQTtTQXVDQSxRQUFBLENBQVMsSUFBVCxFQUFlLElBQWYsRUF4Q2lCO0FBQUEsQ0FsQm5CLENBQUE7O0FBQUEsTUE0RE0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBVSxXQTVEM0IsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbInBvc2l4ID0gcmVxdWlyZSAncG9zaXgnXG51dGlsID0gcmVxdWlyZSAndXRpbCdcbndpbnN0b24gPSByZXF1aXJlICd3aW5zdG9uJ1xuXG5TeXNsb2dQb3NpeCA9IHdpbnN0b24udHJhbnNwb3J0cy5TeXNsb2dQb3NpeCA9IChvcHRpb25zID0ge30pIC0+XG4gIEBuYW1lID0gJ1N5c2xvZ1Bvc2l4J1xuICBAbGV2ZWwgPSBvcHRpb25zLmxldmVsIG9yICdkZWJ1ZydcbiAgQGlkZW50aXR5ID0gb3B0aW9ucy5pZGVudGl0eSBvciBwcm9jZXNzLnRpdGxlXG4gIEBmYWNpbGl0eSA9IG9wdGlvbnMuZmFjaWxpdHkgb3IgJ2xvY2FsMCdcbiAgQHVubWFwcGVkID0gb3B0aW9ucy51bm1hcHBlZCBvciAnaW5mbydcbiAgQHNob3dQaWQgPSBpZiBvcHRpb25zLnNob3dQaWQgPT0gdW5kZWZpbmVkIHRoZW4gdHJ1ZSBlbHNlIG9wdGlvbnMuc2hvd1BpZFxuXG4jXG4jIEluaGVyaXQgZnJvbSBgd2luc3Rvbi5UcmFuc3BvcnRgIHNvIHlvdSBjYW4gdGFrZSBhZHZhbnRhZ2VcbiMgb2YgdGhlIGJhc2UgZnVuY3Rpb25hbGl0eSBhbmQgYC5oYW5kbGVFeGNlcHRpb25zKClgLlxuI1xudXRpbC5pbmhlcml0cyBTeXNsb2dQb3NpeCwgd2luc3Rvbi5UcmFuc3BvcnRcblxuU3lzbG9nUG9zaXg6OmxvZyA9IChsZXZlbCwgbXNnLCBtZXRhLCBjYWxsYmFjaykgLT5cbiAgaWYgQHNpbGVudFxuICAgIHJldHVybiBjYWxsYmFjayBudWxsLCB0cnVlXG5cbiAgIyBtYXAgY29tbW9uIGRlYnVnIGxldmVscyB0byB2YWxpZCBwb3NpeCBzeXNsb2cgdmFsdWVzXG4gIHN5c2xvZ1NldmVyaXR5ID0gbGV2ZWxcbiAgaWYgbGV2ZWwgPT0gJ3RyYWNlJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ2RlYnVnJ1xuICBlbHNlIGlmIGxldmVsID09ICd3YXJuJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ3dhcm5pbmcnXG4gIGVsc2UgaWYgbGV2ZWwgPT0gJ2Vycm9yJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ2VycidcbiAgZWxzZSBpZiBsZXZlbCA9PSAnZmF0YWwnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnZW1lcmcnXG4gIGVsc2VcbiAgICBzeXNsb2dTZXZlcml0eSA9IEB1bm1hcHBlZFxuXG4gIG1lc3NhZ2UgPSBtc2dcbiAgcHJlcGVuZCA9ICdbJyArIGxldmVsICsgJ10gJ1xuICBpZiB0eXBlb2YgbWV0YSA9PSAnc3RyaW5nJ1xuICAgIG1lc3NhZ2UgKz0gJyAnICsgbWV0YVxuICBlbHNlIGlmIG1ldGEgYW5kIHR5cGVvZiBtZXRhID09ICdvYmplY3QnIGFuZCBPYmplY3Qua2V5cyhtZXRhKS5sZW5ndGggPiAwXG4gICAgbWVzc2FnZSArPSAnICcgKyB1dGlsLmluc3BlY3QobWV0YSwgZmFsc2UsIG51bGwsIGZhbHNlKVxuICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC9cXHUwMDFiXFxbKFxcZCsoO1xcZCspKik/bS9nLCAnJylcblxuICAjIHRydW5jYXRlIG1lc3NhZ2UgdG8gYSBtYXggb2YgMTAyNCBieXRlc1xuICBtZXNzYWdlcyA9IFtdXG4gIG1heExlbmd0aCA9IDEwMjQgLSBwcmVwZW5kLmxlbmd0aFxuICB3aGlsZSBtZXNzYWdlLmxlbmd0aCA+IG1heExlbmd0aFxuICAgIG1lc3NhZ2VzLnB1c2ggcHJlcGVuZCArIG1lc3NhZ2Uuc3Vic3RyaW5nKDAsIG1heExlbmd0aClcbiAgICBtZXNzYWdlID0gbWVzc2FnZS5zdWJzdHJpbmcobWF4TGVuZ3RoKVxuICBtZXNzYWdlcy5wdXNoIHByZXBlbmQgKyBtZXNzYWdlXG4gIHN5c2xvZ09wdGlvbnMgPVxuICAgIGNvbnM6IHRydWVcbiAgICBwaWQ6IEBzaG93UGlkXG4gIHBvc2l4Lm9wZW5sb2cgQGlkZW50aXR5LCBzeXNsb2dPcHRpb25zLCBAZmFjaWxpdHlcbiAgbWVzc2FnZXMuZm9yRWFjaCAobWVzc2FnZSkgLT5cbiAgICBwb3NpeC5zeXNsb2cgc3lzbG9nU2V2ZXJpdHksIG1lc3NhZ2VcbiAgcG9zaXguY2xvc2Vsb2coKVxuICBAZW1pdCAnbG9nZ2VkJ1xuICBjYWxsYmFjayBudWxsLCB0cnVlXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFN5c2xvZ1Bvc2l4XG4iXX0=
